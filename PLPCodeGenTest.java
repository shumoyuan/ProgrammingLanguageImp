package cop5556fa18;

import static org.junit.Assert.assertEquals;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa18.PLPAST.Program;
import cop5556fa18.PLPCodeGenUtils.DynamicClassLoader;

public class PLPCodeGenTest {	
	//determines whether show prints anything
		static boolean doPrint = true;
		
		static void show(Object s) {
			if (doPrint) {
				System.out.println(s);
			}
		}

		//determines whether a classfile is created
		static boolean doCreateFile = false;
		
		@Rule
		public ExpectedException thrown = ExpectedException.none();
		

		//values passed to CodeGenerator constructor to control grading and debugging output
		private boolean devel = true; //if true, print devel output
		private boolean grade = true; //if true, print grade output
		
		/**
		 * Generates bytecode for given input.
		 * Throws exceptions for Lexical, Syntax, and Type checking errors
		 * 
		 * @param input   String containing source code
		 * @return        Generated bytecode
		 * @throws Exception
		 */
		byte[] genCode(String input) throws Exception {
			
			//scan, parse, and type check
			PLPScanner scanner = new PLPScanner(input);
			show(input);
			scanner.scan();
			PLPParser parser = new PLPParser(scanner);
			Program program = parser.parse();
			PLPTypeChecker v = new PLPTypeChecker();
			program.visit(v, null);
//			show(program);  //It may be useful useful to show this here if code generation fails

			//generate code
			PLPCodeGen cv = new PLPCodeGen(null, devel, grade);
			byte[] bytecode = (byte[]) program.visit(cv, null);
			show(program); //doing it here shows the values filled in during code gen
			//display the generated bytecode
			show(PLPCodeGenUtils.bytecodeToString(bytecode));
			
			//write byte code to file 
			if (doCreateFile) {
				String name = ((Program) program).name;
				String classFileName = "bin/" + name + ".class";
				OutputStream output = new FileOutputStream(classFileName);
				output.write(bytecode);
				output.close();
				System.out.println("wrote classfile to " + classFileName);
			}
			
			//return generated classfile as byte array
			return bytecode;
		}
		
		/**
		 * Run main method in given class
		 * 
		 * @param className    
		 * @param bytecode    
		 * @param commandLineArgs  String array containing command line arguments, empty array if none
		 * @throws + 
		 * @throws Throwable 
		 */
		void runCode(String className, byte[] bytecode) throws Exception  {
			PLPRuntimeLog.initLog(); //initialize log used for grading.
			DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
			Class<?> testClass = loader.define(className, bytecode);
			String[] commandLineArgs = {};
			@SuppressWarnings("rawtypes")
			Class[] argTypes = {commandLineArgs.getClass()};
			Method m = testClass.getMethod("main", argTypes );
			show("Output from " + m + ":");  //print name of method to be executed
			Object passedArgs[] = {commandLineArgs};//create array containing params, in this case a single array.
			//show(passedArgs);
			try {
			m.invoke(null, passedArgs);	
			}
			catch (Exception e) {
				Throwable cause = e.getCause();
				if (cause instanceof Exception) {
					Exception ec = (Exception) e.getCause();
					throw ec;
				}
				throw  e;
			}
		}
		
		/**
		 * Since we are not doing any optimization, the compiler will 
		 * still create a class with a main method and the JUnit test will
		 * execute it.  
		 * 
		 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
		 * 
		 * @throws Exception
		 */
		@Test
		public void emptyProg() throws Exception {
			String prog = "emptyProg";	
			String input = prog + "{}";
			byte[] bytecode = genCode(input);
			runCode(prog, bytecode);
			show("Log:\n "+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerLit() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{int a=1;a=a+3;print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerLit2() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{int a;a=2;if(a>3){a=a+1;};print a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerLit3() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{int a;a=4;if(a>3){a=a+1;};print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerLit4() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{int a;a=4;while(a>3){a=a-1;};print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void stringLit() throws Exception {
			String prog = "stringLit";
			String input = prog + "{string a = \"I\"+\"am\"+\"here\";print a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;Iamhere;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void stringLit1() throws Exception {
			String prog = "stringLit";
			String input = prog + "{string a =\"I\";a=\"am\";a=\"here\";print a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;here;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void stringLit2() throws Exception {
			String prog = "stringLit";
			String input = prog + "{string a =\"I\";a=\"am\"+\"here\";print a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;amhere;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void SleepLit() throws Exception {
			String prog = "stringLit";
			String input = prog + "{sleep 3;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void IntegerLit() throws Exception {
			String prog = "stringLit";
			String input = prog + "{int a,b;a=3;b=4;print a;print b;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void powerLit() throws Exception {
			String prog = "powerLit";
			String input = prog + "{int a,b;a=3;b=4;b=a**b;print a;print b;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3;81;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void charLit() throws Exception {
			String prog = "charLit";
			String input = prog + "{char a='x';\nprint a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;x;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration3() throws Exception {
			String prog = "prog";
			String input = prog + "{float y; y = -0.5; print y;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-0.5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration4() throws Exception {
			String prog = "prog";
			String input = prog + "{print !false; print !true; print !(true | false); print !(true & false);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;false;false;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration5() throws Exception {
			String prog = "prog";
			String input = prog + "{int x; x = 1; print x; if ( 2 < 3) {int x; x = 2; print x;}; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;2;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration6() throws Exception {
			String prog = "prog";
			String input = prog + "{print -4.5;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-4.5;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration7() throws Exception {
			String prog = "prog";
			String input = prog + "{print abs(1); print abs(-1); print abs(5.3); print abs(-5.3); print abs(1-5.3);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;1;5.3;5.3;4.3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration8() throws Exception {
			String prog = "prog";
			String input = prog + "{float a; a = float(-3.7); print a; a = float(4); print a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-3.7;4.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration9() throws Exception {
			String prog = "prog";
			String input = prog + "{int a; a = int(-3.7); print a; a = int(4); print a;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-3;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration10() throws Exception {
			String prog = "prog";
			String input = prog + "{print sin(10.0); print cos(-10.0);}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-0.5440211;-0.8390715;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void testDeclaration11() throws Exception {
			String prog = "prog";
			String input = prog + "{int x; x = 0; while ( x <4 ) {char a; a = 'a'; print a; x = x + 1;}; print x;}";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;a;a;a;a;4;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
}
