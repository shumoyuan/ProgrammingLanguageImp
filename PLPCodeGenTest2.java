package cop5556fa18;

import static org.junit.Assert.assertEquals;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa18.PLPAST.Program;
import cop5556fa18.PLPCodeGenUtils.DynamicClassLoader;

public class PLPCodeGenTest2 {	
	//determines whether show prints anything
		static boolean doPrint = true;
		
		static void show(Object s) {
			if (doPrint) {
				System.out.println(s);
			}
		}

		//determines whether a classfile is created
		static boolean doCreateFile = false;
		
		@Rule
		public ExpectedException thrown = ExpectedException.none();
		

		//values passed to CodeGenerator constructor to control grading and debugging output
		private boolean devel = true; //if true, print devel output
		private boolean grade = true; //if true, print grade output
		
		/**
		 * Generates bytecode for given input.
		 * Throws exceptions for Lexical, Syntax, and Type checking errors
		 * 
		 * @param input   String containing source code
		 * @return        Generated bytecode
		 * @throws Exception
		 */
		byte[] genCode(String input) throws Exception {
			
			//scan, parse, and type check
			PLPScanner scanner = new PLPScanner(input);
			show(input);
			scanner.scan();
			PLPParser parser = new PLPParser(scanner);
			Program program = parser.parse();
			PLPTypeChecker v = new PLPTypeChecker();
			program.visit(v, null);
//			show(program);  //It may be useful useful to show this here if code generation fails

			//generate code
			PLPCodeGen cv = new PLPCodeGen(null, devel, grade);
			byte[] bytecode = (byte[]) program.visit(cv, null);
			show(program); //doing it here shows the values filled in during code gen
			//display the generated bytecode
			show(PLPCodeGenUtils.bytecodeToString(bytecode));
			
			//write byte code to file 
			if (doCreateFile) {
				String name = ((Program) program).name;
				String classFileName = "bin/" + name + ".class";
				OutputStream output = new FileOutputStream(classFileName);
				output.write(bytecode);
				output.close();
				System.out.println("wrote classfile to " + classFileName);
			}
			
			//return generated classfile as byte array
			return bytecode;
		}
		
		/**
		 * Run main method in given class
		 * 
		 * @param className    
		 * @param bytecode    
		 * @param commandLineArgs  String array containing command line arguments, empty array if none
		 * @throws + 
		 * @throws Throwable 
		 */
		void runCode(String className, byte[] bytecode) throws Exception  {
			PLPRuntimeLog.initLog(); //initialize log used for grading.
			DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
			Class<?> testClass = loader.define(className, bytecode);
			String[] commandLineArgs = {};
			@SuppressWarnings("rawtypes")
			Class[] argTypes = {commandLineArgs.getClass()};
			Method m = testClass.getMethod("main", argTypes );
			Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		    try {
		    	m.invoke(null, passedArgs);
		    } catch (Exception e) {
		    	Throwable cause = e.getCause();
		    	if (cause instanceof Exception) {
		    		Exception ec = (Exception) e.getCause();
		    		throw ec;
		    	}
		    	throw  e;
		    }
			show("Output from " + m + ":");  //print name of method to be executed
		}
		
		/**
		 * Since we are not doing any optimization, the compiler will 
		 * still create a class with a main method and the JUnit test will
		 * execute it.  
		 * 
		 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
		 * 
		 * @throws Exception
		 */
		@Test
		public void emptyProg() throws Exception {
			String prog = "emptyProg";	
			String input = prog + "{}";
			byte[] bytecode = genCode(input);
			runCode(prog, bytecode);
			show("Log:\n "+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerLit() throws Exception {
			String prog = "intgegerLit";
			String input = prog + "{int a; a = 3; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void floatLit() throws Exception {
			String prog = "floatLit";
			String input = prog + "{float a; a = 3.3; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3.3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void booleanLit() throws Exception {
			String prog = "booleanLit";
			String input = prog + "{boolean a; a = true; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;true;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void charLit() throws Exception {
			String prog = "charLit";
			String input = prog + "{char a; a = '3'; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;3;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void stringLit() throws Exception {
			String prog = "stringLit";
			String input = prog + "{string a; a = \"33\"; print a;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;33;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void sleepFunc() throws Exception {
			String prog = "sleepFunc";
			String input = prog + "{sleep 10;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void intFunc() throws Exception {
			String prog = "intFunc";
			String input = prog + "{print int(1);print int(1.1);} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void floatFunc() throws Exception {
			String prog = "floatFunc";
			String input = prog + "{print float(1);print float(1.1);} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.0;1.1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void sinFunc() throws Exception {
			String prog = "sinFunc";
			String input = prog + "{print int(sin(30.0));} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void cosFunc() throws Exception {
			String prog = "cosFunc";
			String input = prog + "{print int(cos(60.0));} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void atanFunc() throws Exception {
			String prog = "atanFunc";
			String input = prog + "{print int(atan(30.0));} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void absFunc() throws Exception {
			String prog = "absFunc";
			String input = prog + "{print abs(1.1);} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1.1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void logFunc() throws Exception {
			String prog = "logFunc";
			String input = prog + "{print log(1.0);} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;0.0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void stringPlus() throws Exception {
			String prog = "stringPlus";
			String input = prog + "{string a = \"abc\"; string b = \"def\"; b = a + b; print b;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;abcdef;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void integerBinary() throws Exception {
			String prog = "integerBinary";
			String input = prog + "{int a=2; print a;int b; a=a-1; print a;b=2; b=b+a;print a; print b; b=b/a; print b;b=b**2; print b; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;1;1;3;3;9;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void complexBinaryTest1() throws Exception {
			String prog = "complexBinary";
			String input = prog + "{int a=2; float b,c; b=1.1; c=a*b; print c; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2.2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void whileTest() throws Exception {
			String prog = "whileTest";
			String input = prog + "{int a,b; a=2; while(a>=0){b=2;b=b+a;a=a-1; print a; print b;}; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;4;0;3;-1;2;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void exprUnary() throws Exception {
			String prog = "exprUnary";
			String input = prog + "{int a = 1; boolean b = true; print +a; print -a; print !b;} ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;-1;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void exprConditional() throws Exception {
			String prog = "exprConditional";
			String input = prog + "{int a = 1; int b; b = a > 0 ? 1: 0; print b; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void complexBinaryTest2() throws Exception {
			String prog = "complexBinary";
			String input = prog + "{int a,b; a=2; b=1;b=b/a;print a; print b; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;0;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void complexBinaryTest3() throws Exception {
			String prog = "complexBinary";
			String input = prog + "{int a,b; a=2; b=1;b=b**a; print a; print b; } ";	
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;2;1;leaving main;",PLPRuntimeLog.globalLog.toString());
		}
		
		@Test
		public void complicatedTest() throws Exception {
			String prog = "Prog";
			String input = prog + "{"
					+ "int a = 2;"
					+ "int b;"
					+ "string c = \"abc\";"
					+ "string d = \"def\";"
					+ "float e,f;"
					+ "boolean g, h;"
					+ "char i = 'a';"
					+ "char j = i;"
					+ "e = 1.1;"
					+ "g = true;"
					+ "h = false;"
					+ "b = 2;"
					+ "f = e * b;"
					+ "if (((g | (h & g)) != false) & ((g | (h & g)) == true)) {"
					+ "d = c + d;"
					+ "};"
					+ "while (a >= 0) {"
					+ "a = a - 1;"
					+ "b = b + a;"
					+ "if (b != 0) {"
					+ "b = a / b;"
					+ "};"
					+ "b = 2 ** b;"
					+ "};"
					+ "if (true > false) {print a; print b;};"
					+ "if (a < 0) {print c; print d;};"
					+ "if (0 <= b) {print e; print f;};"
					+ "print i; print j; print g; print h;"
					+ "}  ";
			byte[] bytecode = genCode(input);		
			runCode(prog, bytecode);	
			show("Log:\n"+PLPRuntimeLog.globalLog);
			assertEquals("entering main;-1;1;abc;abcdef;1.1;2.2;a;a;true;false;leaving main;",PLPRuntimeLog.globalLog.toString());
		}

}
