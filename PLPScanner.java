/**
* Name£ºJue Yuan
* Assignment number£ºProject Final
* Date Due£ºDecbember 4, 2018
* 
* Initial code for the Scanner
*/

package cop5556fa18;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

public class PLPScanner {
	
	@SuppressWarnings("serial")
	public static class LexicalException extends Exception {

		int pos;

		public LexicalException(String message, int pos) {
			super(message);
			this.pos = pos;
		}

		public int getPos() {
			return pos;
		}
	}
	
	public static enum Kind {
		IDENTIFIER, INTEGER_LITERAL, BOOLEAN_LITERAL, FLOAT_LITERAL,
		STRING_LITERAL, CHAR_LITERAL,
		KW_print        /* print       */,
		KW_int          /* int         */,
		KW_float        /* float       */,
		KW_boolean      /* boolean     */,
		KW_if           /* if          */,
		KW_while 		/* while 	   */,
		KW_char         /* char        */,
		KW_string       /* string      */,
		KW_sleep        /* sleep       */,
		KW_abs			/* abs 		   */,
		KW_sin			/* sin 		   */,
		KW_cos			/* cos 		   */, 
		KW_atan			/* atan        */,
		KW_log			/* log 		   */,
		OP_ASSIGN       /* =           */, 
		OP_EXCLAMATION  /* !           */,
		OP_QUESTION		/* ? 		   */,
		OP_EQ           /* ==          */,
		OP_NEQ          /* !=          */, 
		OP_GE           /* >=          */,
		OP_LE           /* <=          */,
		OP_GT           /* >           */,
		OP_LT           /* <           */,
		OP_AND			/* & 		   */, 
		OP_OR			/* | 		   */,
		OP_PLUS         /* +           */,
		OP_MINUS        /* -           */,
		OP_TIMES        /* *           */,
		OP_DIV          /* /           */,
		OP_MOD          /* %           */,
		OP_POWER        /* **          */, 
		LPAREN          /* (           */,
		RPAREN          /* )           */,
		LBRACE          /* {           */, 
		RBRACE          /* }           */,
		LSQUARE			/* [           */, 
		RSQUARE			/* ]           */, 	
		SEMI            /* ;           */,
		OP_COLON		/* : 		   */,
		COMMA           /* ,           */,
		DOT             /* .           */,
		COMMENT         /* comment     */,		
		EOF;            /* end of file */
		
	}
	
	/**
	 * Class to represent Tokens.
	 *
	 */
	public class Token {
		public final Kind kind;
		public final int pos; // position of first character of this token in the input. Counting starts at 0
								// and is incremented for every character.
		public final int length; // number of characters in this token

		public Token(Kind kind, int pos, int length) {
			super();
			this.kind = kind;
			this.pos = pos;
			this.length = length;
		}
		
		/**
		 * Calculates and returns the line on which this token resides. The first line
		 * in the source code is line 1.
		 * 
		 * @return line number of this Token in the input.
		 */
		public int line() {
			return PLPScanner.this.line(pos) + 1;
		}

		/**
		 * Returns position in line of this token.
		 * 
		 * @param line.
		 *            The line number (starting at 1) for this token, i.e. the value
		 *            returned from Token.line()
		 * @return
		 */
		public int posInLine(int line) {
			return PLPScanner.this.posInLine(pos, line - 1) + 1;
		}

		/**
		 * Returns the position in the line of this Token in the input. Characters start
		 * counting at 1. Line termination characters belong to the preceding line.
		 * 
		 * @return
		 */
		public int posInLine() {
			return PLPScanner.this.posInLine(pos) + 1;
		}

		public String toString() {
			int line = line();
			return "[" + kind + "," +
			       String.copyValueOf(chars, pos, length) + "," +
			       pos + "," +
			       length + "," +
			       line + "," +
			       posInLine(line) + "]";
		}

		/**
		 * Since we override equals, we need to override hashCode, too.
		 * 
		 * See
		 * https://docs.oracle.com/javase/9/docs/api/java/lang/Object.html#hashCode--
		 * where it says, "If two objects are equal according to the equals(Object)
		 * method, then calling the hashCode method on each of the two objects must
		 * produce the same integer result."
		 * 
		 * This method, along with equals, was generated by eclipse
		 * 
		 */
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + ((kind == null) ? 0 : kind.hashCode());
			result = prime * result + length;
			result = prime * result + pos;
			return result;
		}

		/**
		 * Override equals so that two Tokens are equal if they have the same Kind, pos,
		 * and length.
		 * 
		 * This method, along with hashcode, was generated by eclipse.
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Token other = (Token) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (kind != other.kind)
				return false;
			if (length != other.length)
				return false;
			if (pos != other.pos)
				return false;
			return true;
		}

		/**
		 * used in equals to get the Scanner object this Token is associated with.
		 * 
		 * @return
		 */
		private PLPScanner getOuterType() {
			return PLPScanner.this;
		}
	}
	
	/**
	 * Array of positions of beginning of lines. lineStarts[k] is the pos of the
	 * first character in line k (starting at 0).
	 * 
	 * If the input is empty, the chars array will have one element, the synthetic
	 * EOFChar token and lineStarts will have size 1 with lineStarts[0] = 0;
	 */
	int[] lineStarts;

	int[] initLineStarts() {
		ArrayList<Integer> lineStarts = new ArrayList<Integer>();
		int pos = 0;

		for (pos = 0; pos < chars.length; pos++) {
			lineStarts.add(pos);
			char ch = chars[pos];
			while (ch != EOFChar && ch != '\n' && ch != '\r') {
				pos++;
				ch = chars[pos];
			}
			if (ch == '\r' && chars[pos + 1] == '\n') {
				pos++;
			}
		}
		// convert arrayList<Integer> to int[]
		return lineStarts.stream().mapToInt(Integer::valueOf).toArray();
	}
	
	int line(int pos) {
		int line = Arrays.binarySearch(lineStarts, pos);
		if (line < 0) {
			line = -line - 2;
		}
		return line;
	}

	public int posInLine(int pos, int line) {
		return pos - lineStarts[line];
	}

	public int posInLine(int pos) {
		int line = line(pos);
		return posInLine(pos, line);
	}
	
	/**
	 * Sentinal character added to the end of the input characters.
	 */
	static final char EOFChar = 128;

	/**
	 * The list of tokens created by the scan method.
	 */
	final ArrayList<Token> tokens;

	/**
	 * An array of characters representing the input. These are the characters from
	 * the input string plus an additional EOFchar at the end.
	 */
	final char[] chars;

	/**
	 * position of the next token to be returned by a call to nextToken
	 */
	private int nextTokenPos = 0;
	
	static HashMap<String, Kind> keyWords;
	
	PLPScanner(String inputString) {
		int numChars = inputString.length();
		this.chars = Arrays.copyOf(inputString.toCharArray(), numChars + 1); // input string terminated with null char
		chars[numChars] = EOFChar;
		tokens = new ArrayList<Token>();
		lineStarts = initLineStarts();
		keyWords = new HashMap<String, Kind>();
		keyWords.put("true", Kind.BOOLEAN_LITERAL);
		keyWords.put("false", Kind.BOOLEAN_LITERAL);
		keyWords.put("int", Kind.KW_int);
		keyWords.put("print", Kind.KW_print);
		keyWords.put("int", Kind.KW_int);
		keyWords.put("boolean", Kind.KW_boolean);
		keyWords.put("float", Kind.KW_float);
		keyWords.put("if", Kind.KW_if);
		keyWords.put("while", Kind.KW_while);
		keyWords.put("char", Kind.KW_char);
		keyWords.put("string", Kind.KW_string);
		keyWords.put("sleep", Kind.KW_sleep);
		keyWords.put("abs", Kind.KW_abs);
		keyWords.put("sin", Kind.KW_sin);
		keyWords.put("cos", Kind.KW_cos);
		keyWords.put("atan", Kind.KW_atan);
		keyWords.put("log", Kind.KW_log);
	}
	
	private enum State {START,If_digit,If_Id,If_times,If_comment,If_equal,If_not,If_LT,If_GT,If_float,If_0,If_char,If_string,COMMENT,UnderScoreIden};  //TODO:  this is incomplete
	
	public static class IdenSearch{
		static boolean Iden_start(char ch) {
			return Character.isAlphabetic(ch) || ch == '_';
		}
		
		static boolean Iden_follow(char ch) {
			return Character.isAlphabetic(ch) ||Character.isDigit(ch)|| ch == '_';
		}
		
		static boolean ASCII_test(char ch) {
			return ch>=0&&ch<=127;
		}
	}
	
	public PLPScanner scan() throws LexicalException {
		int pos = 0;
		State state = State.START;
		int startPos = 0;
		
		//TODO:  this is incomplete
		
		while (pos < chars.length) {
			char ch = chars[pos];
			switch(state) {
				case START: {
					startPos = pos;
					switch (ch) {
						case EOFChar: {
							tokens.add(new Token(Kind.EOF, startPos, 0));
							pos++; // next iteration will terminate loop
						}
						break;
						
						case ';': {
							tokens.add(new Token(Kind.SEMI, startPos, pos - startPos + 1));
							pos++;
						}
						break;
						
						case ' ':
						case '\t':
						case '\f':
						case '\r':
						case '\n':
						{
							pos++;
						}
						break;
						
						case '+':{
							tokens.add(new Token(Kind.OP_PLUS,startPos,1));
							pos++;
						}
						break;
						
						case '-':{
							tokens.add(new Token(Kind.OP_MINUS,startPos,1));
							pos++;
						}
						break;
						
						case '*':{
							state=State.If_times;
							pos++;
						}
						break;
						
						case '/':{
							tokens.add(new Token(Kind.OP_DIV,startPos,1));
							pos++;
						}
						break;
						
						case '=':{
							state=State.If_equal;
							pos++;
						}
						break;
						
						case '!':{
							state=State.If_not;
							pos++;
						}
						break;
						
						case '?':{
							tokens.add(new Token(Kind.OP_QUESTION,startPos,1));
							pos++;
						}
						break;
						
						case '<':{
							state=State.If_LT;
							pos++;
						}
						break;
						
						case '>':{
							state=State.If_GT;
							pos++;
						}
						break;
						
						case '&':{
							tokens.add(new Token(Kind.OP_AND,startPos,1));
							pos++;
						}
						break;
						
						case '|':{
							tokens.add(new Token(Kind.OP_OR,startPos,1));
							pos++;
						}
						break;
						
						case '%':{
							state=State.If_comment;
							pos++;
						}
						break;
						
						case '(': {
							tokens.add(new Token(Kind.LPAREN, startPos, 1));
							pos++;
						}
						break;
						
						case ')': {
							tokens.add(new Token(Kind.RPAREN, startPos, 1));
							pos++;
						}
						break;

						case ':': {
							tokens.add(new Token(Kind.OP_COLON, startPos, 1));
							pos++;
						}
						break;
						
						case ',': {
							tokens.add(new Token(Kind.COMMA, startPos, 1));
							pos++;
						}
						break;
						
						case '{': {
							tokens.add(new Token(Kind.LBRACE, startPos, 1));
							pos++;
						}
						break;
						
						case '}': {
							tokens.add(new Token(Kind.RBRACE, startPos, 1));
							pos++;
						}
						break;
						
						case '[': {
							tokens.add(new Token(Kind.LSQUARE, startPos, 1));
							pos++;
						}
						break;
						
						case ']': {
							tokens.add(new Token(Kind.RSQUARE, startPos, 1));
							pos++;
						}
						break;
						
						case '.': {
							state = State.If_float;
							pos++;
						}
						break;
						
						case '0': {
							state = State.If_0;
							pos++;
						}
						break;
						
						case '\'':{
							state = State.If_char;
							pos++;
						}
						break;
						
						case '\"':{
							state = State.If_string;
							pos++;
						}
						break;
						
						default: {
							if(Character.isDigit(ch))
							{
								state=State.If_digit;
								pos++;
							}
							else if(IdenSearch.Iden_start(ch))
							{
								if(ch=='_') {
									state=State.UnderScoreIden;
									pos++;
								}
								else{state=State.If_Id;
								pos++;
								}
							}
							else {
								error(pos, line(pos), posInLine(pos), "illegal char");
							}
						}
					}//switch ch
				}
				break;
				
				case If_digit:
				{
					if(Character.isDigit(ch) ) 
					{
						pos++;
					}
					else if(ch=='.')
					{
						state=State.If_float;
						pos++;
					}
					else
					{
						if(Double.parseDouble(new String(chars,startPos,pos- startPos)) < -22147483648.0||(Double.parseDouble(new String(chars, startPos, pos - startPos)) > 2147483647.0))
						{
							error(pos, line(pos), posInLine(pos), "Number out of range");
						}
						else
						{
							tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, pos - startPos));
							state = State.START;
						}
					}
				}
				break;
				
				case If_Id:
				{
					if (IdenSearch.Iden_follow(ch)) {
                        pos++;
                    } else {
                        int len = pos - startPos;
                        String tokenStr = new String(chars, startPos, len);
                        Kind kind = Kind.IDENTIFIER;
                        if (keyWords.containsKey(tokenStr)) {
                            kind = keyWords.get(tokenStr);
                        }
                        tokens.add(new Token(kind, startPos, len));
                        state = State.START;
                    }
                }
				break;
				
				case UnderScoreIden:
				{
					if(chars.length==2) {
						error(pos, line(pos), posInLine(pos), "All underscores");
					}
						
					int tst=pos;
					if (IdenSearch.Iden_follow(ch)) {
                        if(ch=='_') {
                        	tst++;
                        }
						pos++;
                        if(tst==chars.length-1) {
                        	error(pos, line(pos), posInLine(pos), "All underscores");
                        }
                    }else {
                        int len = pos - startPos;
                        String tokenStr = new String(chars, startPos, len);
                        Kind kind = Kind.IDENTIFIER;
                        if (keyWords.containsKey(tokenStr)) {
                            kind = keyWords.get(tokenStr);
                        }
                        tokens.add(new Token(kind, startPos, len));
                        state = State.START;
                    }
                }
				break;
				
				case If_equal:
				{
					if(ch == '=')
					{
						state = State.START;
						pos++;
						tokens.add(new Token(Kind.OP_EQ, startPos, 2));
					}
					else
					{
						tokens.add(new Token(Kind.OP_ASSIGN, startPos, 1));
					}
					state = State.START;
				}
				break;
				
				case If_times:
				{
					if(ch == '*')
					{
						state = State.START;
						tokens.add(new Token(Kind.OP_POWER, startPos, 2));
						pos++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_TIMES, startPos, 1));
						state = State.START;
					}
				}
				break;
				
				case If_not:
				{
					if(ch == '=')
					{
						state = State.START;
						tokens.add(new Token(Kind.OP_NEQ, startPos, 2));
						pos++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_EXCLAMATION, startPos, 1));
						state = State.START;
					}
				}
				break;
				
				case If_comment:
				{
					if (ch == '{')
					{
						state = State.COMMENT;
						pos++;
					}else
					{
						tokens.add(new Token(Kind.OP_MOD, startPos, 1));
						state = State.START;
					}
				}
				break;
				
				case COMMENT:
				{					
					while(chars[pos] != '%'|| chars[pos+1] != '}')
					{
						if(pos<chars.length-1) {
							pos++;
						}else{
							error(pos, line(pos), posInLine(pos), "error comment");
						}
					}
					if(chars[pos] == '%' && chars[pos+1] == '{') {
						error(pos, line(pos), posInLine(pos), "error comment");
					}else if(chars[pos] == '%' && chars[pos+1] == '}')
					{
						pos = pos + 2;
					}						
										
					state = State.START;
									
				}
				break;
								
				case If_LT:
				{
					if (ch == '=')
					{
						state = State.START;
						tokens.add(new Token(Kind.OP_LE, startPos, 2));
						pos++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_LT, startPos, 1));
						state = State.START;
					}
				}
				break;
				
				case If_GT:
				{
					if (ch == '=')
					{
						state = State.START;
						tokens.add(new Token(Kind.OP_GE, startPos, 2));
						pos++;
					}
					else
					{
						tokens.add(new Token(Kind.OP_GT, startPos, 1));
						state = State.START;
					}
				}
				break;
				
				case If_float:
				{
					if(Character.isDigit(ch))
					{
						pos++;
					}
					else
					{
						if((pos - startPos) == 1)
						{
							tokens.add(new Token(Kind.DOT, startPos, pos - startPos));
							state = State.START;
						}
						else
						{
							boolean m = Float.isFinite(Float.parseFloat(new String(chars, startPos, pos - startPos)));
							if(m == false)
							{
								error(pos, line(pos), posInLine(pos), "Float not in range ");
							}
							if(pos-startPos==2) {
								error(pos, line(pos), posInLine(pos), "Missing fraction");
							}
							tokens.add(new Token(Kind.FLOAT_LITERAL, startPos, pos - startPos));
							state = State.START;
						}
					}
				}
				break;
				
				case If_0:
				{
					if(ch == '.')
					{
						state = State.If_float;
						pos++;
					}
					else
					{
						tokens.add(new Token(Kind.INTEGER_LITERAL, startPos, 1));
						state = State.START;
					}
				}
				break;
				
				case If_char:
				{
					if(ch == '\'')
					{
						pos++;
						tokens.add(new Token(Kind.CHAR_LITERAL, startPos, pos-startPos));
					}
					else if(ch>=0&&ch<=127)
					{
						if(chars[pos+1]== '\'')
						{
							pos=pos+2;
							tokens.add(new Token(Kind.CHAR_LITERAL, startPos, pos-startPos));
						}
						else 
						{
							error(pos, line(pos), posInLine(pos), "error char");
						}
					}
					state = State.START;
				}
				break;
				
				case If_string:
				{
					while(chars[pos] != '\"')
					{
						pos++;
					}
					if(chars[pos] == '\"')
					{
						pos++;
						tokens.add(new Token(Kind.STRING_LITERAL, startPos, pos-startPos));
					}		
					else 
					{
						error(pos, line(pos), posInLine(pos), "error char");
					}
					state = State.START;
				}
				break;
				
				default: {
					error(pos, 0, 0, "undefined state");
				}
			}// switch state
		} // while
		
		return this;
	}
	
	private void error(int pos, int line, int posInLine, String message) throws LexicalException {
		String m = (line + 1) + ":" + (posInLine + 1) + " " + message;
		throw new LexicalException(m, pos);
	}

	/**
	 * Returns true if the internal iterator has more Tokens
	 * 
	 * @return
	 */
	public boolean hasTokens() {
		return nextTokenPos < tokens.size();
	}

	/**
	 * Returns the next Token and updates the internal iterator so that the next
	 * call to nextToken will return the next token in the list.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition: hasTokens()
	 * 
	 * @return
	 */
	public Token nextToken() {
		return tokens.get(nextTokenPos++);
	}
	
	/**
	 * Returns the next Token, but does not update the internal iterator. This means
	 * that the next call to nextToken or peek will return the same Token as
	 * returned by this methods.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition: hasTokens()
	 * 
	 * @return next Token.
	 */
	public Token peek() {
		return tokens.get(nextTokenPos);
	}

	/**
	 * Resets the internal iterator so that the next call to peek or nextToken will
	 * return the first Token.
	 */
	public void reset() {
		nextTokenPos = 0;
	}

	/**
	 * Returns a String representation of the list of Tokens and line starts
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Tokens:\n");
		for (int i = 0; i < tokens.size(); i++) {
			sb.append(tokens.get(i)).append('\n');
		}
		sb.append("Line starts:\n");
		for (int i = 0; i < lineStarts.length; i++) {
			sb.append(i).append(' ').append(lineStarts[i]).append('\n');
		}
		return sb.toString();
	}


}
